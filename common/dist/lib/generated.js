// Generated by @wagmi/cli@0.1.15 on 4/13/2023 at 7:04:04 p.m.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const baseAccountABI = [
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'entryPoint',
        outputs: [
            { name: '', internalType: 'contract IEntryPoint', type: 'address' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'nonce',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
            { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'validateUserOp',
        outputs: [
            { name: 'validationData', internalType: 'uint256', type: 'uint256' },
        ],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EntryPoint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const entryPointABI = [
    {
        type: 'error',
        inputs: [
            { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
            { name: 'paid', internalType: 'uint256', type: 'uint256' },
            { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
            { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
            { name: 'targetSuccess', internalType: 'bool', type: 'bool' },
            { name: 'targetResult', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'ExecutionResult',
    },
    {
        type: 'error',
        inputs: [
            { name: 'opIndex', internalType: 'uint256', type: 'uint256' },
            { name: 'reason', internalType: 'string', type: 'string' },
        ],
        name: 'FailedOp',
    },
    {
        type: 'error',
        inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
        name: 'SenderAddressResult',
    },
    {
        type: 'error',
        inputs: [{ name: 'aggregator', internalType: 'address', type: 'address' }],
        name: 'SignatureValidationFailed',
    },
    {
        type: 'error',
        inputs: [
            {
                name: 'returnInfo',
                internalType: 'struct IEntryPoint.ReturnInfo',
                type: 'tuple',
                components: [
                    { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
                    { name: 'prefund', internalType: 'uint256', type: 'uint256' },
                    { name: 'sigFailed', internalType: 'bool', type: 'bool' },
                    { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
                    { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
                    { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
                ],
            },
            {
                name: 'senderInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'factoryInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'paymasterInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
        ],
        name: 'ValidationResult',
    },
    {
        type: 'error',
        inputs: [
            {
                name: 'returnInfo',
                internalType: 'struct IEntryPoint.ReturnInfo',
                type: 'tuple',
                components: [
                    { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
                    { name: 'prefund', internalType: 'uint256', type: 'uint256' },
                    { name: 'sigFailed', internalType: 'bool', type: 'bool' },
                    { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
                    { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
                    { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
                ],
            },
            {
                name: 'senderInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'factoryInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'paymasterInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'aggregatorInfo',
                internalType: 'struct IEntryPoint.AggregatorStakeInfo',
                type: 'tuple',
                components: [
                    { name: 'aggregator', internalType: 'address', type: 'address' },
                    {
                        name: 'stakeInfo',
                        internalType: 'struct IStakeManager.StakeInfo',
                        type: 'tuple',
                        components: [
                            { name: 'stake', internalType: 'uint256', type: 'uint256' },
                            {
                                name: 'unstakeDelaySec',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                        ],
                    },
                ],
            },
        ],
        name: 'ValidationResultWithAggregation',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'userOpHash',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'sender',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'factory',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'paymaster',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'AccountDeployed',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'totalDeposit',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'Deposited',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'aggregator',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'SignatureAggregatorChanged',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'totalStaked',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'unstakeDelaySec',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeLocked',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawTime',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeUnlocked',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawAddress',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'amount',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeWithdrawn',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'userOpHash',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'sender',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'paymaster',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'nonce',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            { name: 'success', internalType: 'bool', type: 'bool', indexed: false },
            {
                name: 'actualGasCost',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'actualGasUsed',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'UserOperationEvent',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'userOpHash',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'sender',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'nonce',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'revertReason',
                internalType: 'bytes',
                type: 'bytes',
                indexed: false,
            },
        ],
        name: 'UserOperationRevertReason',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawAddress',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'amount',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'Withdrawn',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'SIG_VALIDATION_FAILED',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'initCode', internalType: 'bytes', type: 'bytes' },
            { name: 'sender', internalType: 'address', type: 'address' },
            { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
        ],
        name: '_validateSenderAndPaymaster',
        outputs: [],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
        ],
        name: 'addStake',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'depositTo',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'address', type: 'address' }],
        name: 'deposits',
        outputs: [
            { name: 'deposit', internalType: 'uint112', type: 'uint112' },
            { name: 'staked', internalType: 'bool', type: 'bool' },
            { name: 'stake', internalType: 'uint112', type: 'uint112' },
            { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
            { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'getDepositInfo',
        outputs: [
            {
                name: 'info',
                internalType: 'struct IStakeManager.DepositInfo',
                type: 'tuple',
                components: [
                    { name: 'deposit', internalType: 'uint112', type: 'uint112' },
                    { name: 'staked', internalType: 'bool', type: 'bool' },
                    { name: 'stake', internalType: 'uint112', type: 'uint112' },
                    { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
                    { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
                ],
            },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'initCode', internalType: 'bytes', type: 'bytes' }],
        name: 'getSenderAddress',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'getUserOpHash',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'opsPerAggregator',
                internalType: 'struct IEntryPoint.UserOpsPerAggregator[]',
                type: 'tuple[]',
                components: [
                    {
                        name: 'userOps',
                        internalType: 'struct UserOperation[]',
                        type: 'tuple[]',
                        components: [
                            { name: 'sender', internalType: 'address', type: 'address' },
                            { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                            { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                            { name: 'callData', internalType: 'bytes', type: 'bytes' },
                            {
                                name: 'callGasLimit',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'verificationGasLimit',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'preVerificationGas',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'maxFeePerGas',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'maxPriorityFeePerGas',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'paymasterAndData',
                                internalType: 'bytes',
                                type: 'bytes',
                            },
                            { name: 'signature', internalType: 'bytes', type: 'bytes' },
                        ],
                    },
                    {
                        name: 'aggregator',
                        internalType: 'contract IAggregator',
                        type: 'address',
                    },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'beneficiary', internalType: 'address payable', type: 'address' },
        ],
        name: 'handleAggregatedOps',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'ops',
                internalType: 'struct UserOperation[]',
                type: 'tuple[]',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'beneficiary', internalType: 'address payable', type: 'address' },
        ],
        name: 'handleOps',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'callData', internalType: 'bytes', type: 'bytes' },
            {
                name: 'opInfo',
                internalType: 'struct EntryPoint.UserOpInfo',
                type: 'tuple',
                components: [
                    {
                        name: 'mUserOp',
                        internalType: 'struct EntryPoint.MemoryUserOp',
                        type: 'tuple',
                        components: [
                            { name: 'sender', internalType: 'address', type: 'address' },
                            { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                            {
                                name: 'callGasLimit',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'verificationGasLimit',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'preVerificationGas',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            { name: 'paymaster', internalType: 'address', type: 'address' },
                            {
                                name: 'maxFeePerGas',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'maxPriorityFeePerGas',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                        ],
                    },
                    { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
                    { name: 'prefund', internalType: 'uint256', type: 'uint256' },
                    { name: 'contextOffset', internalType: 'uint256', type: 'uint256' },
                    { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
                ],
            },
            { name: 'context', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'innerHandleOp',
        outputs: [
            { name: 'actualGasCost', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'op',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'target', internalType: 'address', type: 'address' },
            { name: 'targetCallData', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'simulateHandleOp',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'simulateValidation',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [],
        name: 'unlockStake',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'withdrawAddress',
                internalType: 'address payable',
                type: 'address',
            },
        ],
        name: 'withdrawStake',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'withdrawAddress',
                internalType: 'address payable',
                type: 'address',
            },
            { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'withdrawTo',
        outputs: [],
    },
    { stateMutability: 'payable', type: 'receive' },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DevDeploy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const devDeployABI = [
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'IS_SCRIPT',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [],
        name: 'run',
        outputs: [],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Factory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const erc1967FactoryABI = [
    { type: 'error', inputs: [], name: 'DeploymentFailed' },
    { type: 'error', inputs: [], name: 'SaltDoesNotStartWithCaller' },
    { type: 'error', inputs: [], name: 'Unauthorized' },
    { type: 'error', inputs: [], name: 'UpgradeFailed' },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'proxy',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'admin',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'AdminChanged',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'proxy',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'implementation',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'admin',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'Deployed',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'proxy',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'implementation',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'Upgraded',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'proxy', internalType: 'address', type: 'address' }],
        name: 'adminOf',
        outputs: [{ name: 'admin', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'proxy', internalType: 'address', type: 'address' },
            { name: 'admin', internalType: 'address', type: 'address' },
        ],
        name: 'changeAdmin',
        outputs: [],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'implementation', internalType: 'address', type: 'address' },
            { name: 'admin', internalType: 'address', type: 'address' },
        ],
        name: 'deploy',
        outputs: [{ name: 'proxy', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'implementation', internalType: 'address', type: 'address' },
            { name: 'admin', internalType: 'address', type: 'address' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'deployAndCall',
        outputs: [{ name: 'proxy', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'implementation', internalType: 'address', type: 'address' },
            { name: 'admin', internalType: 'address', type: 'address' },
            { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
        ],
        name: 'deployDeterministic',
        outputs: [{ name: 'proxy', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'implementation', internalType: 'address', type: 'address' },
            { name: 'admin', internalType: 'address', type: 'address' },
            { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'deployDeterministicAndCall',
        outputs: [{ name: 'proxy', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'initCodeHash',
        outputs: [{ name: 'result', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'salt', internalType: 'bytes32', type: 'bytes32' }],
        name: 'predictDeterministicAddress',
        outputs: [{ name: 'predicted', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'proxy', internalType: 'address', type: 'address' },
            { name: 'implementation', internalType: 'address', type: 'address' },
        ],
        name: 'upgrade',
        outputs: [],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'proxy', internalType: 'address', type: 'address' },
            { name: 'implementation', internalType: 'address', type: 'address' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'upgradeAndCall',
        outputs: [],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const iAccountABI = [
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
            { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'validateUserOp',
        outputs: [
            { name: 'validationData', internalType: 'uint256', type: 'uint256' },
        ],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAggregator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const iAggregatorABI = [
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            {
                name: 'userOps',
                internalType: 'struct UserOperation[]',
                type: 'tuple[]',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'aggregateSignatures',
        outputs: [
            { name: 'aggregatedSignature', internalType: 'bytes', type: 'bytes' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            {
                name: 'userOps',
                internalType: 'struct UserOperation[]',
                type: 'tuple[]',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'validateSignatures',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'validateUserOpSignature',
        outputs: [{ name: 'sigForUserOp', internalType: 'bytes', type: 'bytes' }],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEntryPoint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const iEntryPointABI = [
    {
        type: 'error',
        inputs: [
            { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
            { name: 'paid', internalType: 'uint256', type: 'uint256' },
            { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
            { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
            { name: 'targetSuccess', internalType: 'bool', type: 'bool' },
            { name: 'targetResult', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'ExecutionResult',
    },
    {
        type: 'error',
        inputs: [
            { name: 'opIndex', internalType: 'uint256', type: 'uint256' },
            { name: 'reason', internalType: 'string', type: 'string' },
        ],
        name: 'FailedOp',
    },
    {
        type: 'error',
        inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
        name: 'SenderAddressResult',
    },
    {
        type: 'error',
        inputs: [{ name: 'aggregator', internalType: 'address', type: 'address' }],
        name: 'SignatureValidationFailed',
    },
    {
        type: 'error',
        inputs: [
            {
                name: 'returnInfo',
                internalType: 'struct IEntryPoint.ReturnInfo',
                type: 'tuple',
                components: [
                    { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
                    { name: 'prefund', internalType: 'uint256', type: 'uint256' },
                    { name: 'sigFailed', internalType: 'bool', type: 'bool' },
                    { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
                    { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
                    { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
                ],
            },
            {
                name: 'senderInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'factoryInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'paymasterInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
        ],
        name: 'ValidationResult',
    },
    {
        type: 'error',
        inputs: [
            {
                name: 'returnInfo',
                internalType: 'struct IEntryPoint.ReturnInfo',
                type: 'tuple',
                components: [
                    { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
                    { name: 'prefund', internalType: 'uint256', type: 'uint256' },
                    { name: 'sigFailed', internalType: 'bool', type: 'bool' },
                    { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
                    { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
                    { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
                ],
            },
            {
                name: 'senderInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'factoryInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'paymasterInfo',
                internalType: 'struct IStakeManager.StakeInfo',
                type: 'tuple',
                components: [
                    { name: 'stake', internalType: 'uint256', type: 'uint256' },
                    { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
                ],
            },
            {
                name: 'aggregatorInfo',
                internalType: 'struct IEntryPoint.AggregatorStakeInfo',
                type: 'tuple',
                components: [
                    { name: 'aggregator', internalType: 'address', type: 'address' },
                    {
                        name: 'stakeInfo',
                        internalType: 'struct IStakeManager.StakeInfo',
                        type: 'tuple',
                        components: [
                            { name: 'stake', internalType: 'uint256', type: 'uint256' },
                            {
                                name: 'unstakeDelaySec',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                        ],
                    },
                ],
            },
        ],
        name: 'ValidationResultWithAggregation',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'userOpHash',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'sender',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'factory',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'paymaster',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'AccountDeployed',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'totalDeposit',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'Deposited',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'aggregator',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'SignatureAggregatorChanged',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'totalStaked',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'unstakeDelaySec',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeLocked',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawTime',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeUnlocked',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawAddress',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'amount',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeWithdrawn',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'userOpHash',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'sender',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'paymaster',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'nonce',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            { name: 'success', internalType: 'bool', type: 'bool', indexed: false },
            {
                name: 'actualGasCost',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'actualGasUsed',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'UserOperationEvent',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'userOpHash',
                internalType: 'bytes32',
                type: 'bytes32',
                indexed: true,
            },
            {
                name: 'sender',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'nonce',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'revertReason',
                internalType: 'bytes',
                type: 'bytes',
                indexed: false,
            },
        ],
        name: 'UserOperationRevertReason',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawAddress',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'amount',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'Withdrawn',
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: '_unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
        ],
        name: 'addStake',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'depositTo',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'getDepositInfo',
        outputs: [
            {
                name: 'info',
                internalType: 'struct IStakeManager.DepositInfo',
                type: 'tuple',
                components: [
                    { name: 'deposit', internalType: 'uint112', type: 'uint112' },
                    { name: 'staked', internalType: 'bool', type: 'bool' },
                    { name: 'stake', internalType: 'uint112', type: 'uint112' },
                    { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
                    { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
                ],
            },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'initCode', internalType: 'bytes', type: 'bytes' }],
        name: 'getSenderAddress',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'getUserOpHash',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'opsPerAggregator',
                internalType: 'struct IEntryPoint.UserOpsPerAggregator[]',
                type: 'tuple[]',
                components: [
                    {
                        name: 'userOps',
                        internalType: 'struct UserOperation[]',
                        type: 'tuple[]',
                        components: [
                            { name: 'sender', internalType: 'address', type: 'address' },
                            { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                            { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                            { name: 'callData', internalType: 'bytes', type: 'bytes' },
                            {
                                name: 'callGasLimit',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'verificationGasLimit',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'preVerificationGas',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'maxFeePerGas',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'maxPriorityFeePerGas',
                                internalType: 'uint256',
                                type: 'uint256',
                            },
                            {
                                name: 'paymasterAndData',
                                internalType: 'bytes',
                                type: 'bytes',
                            },
                            { name: 'signature', internalType: 'bytes', type: 'bytes' },
                        ],
                    },
                    {
                        name: 'aggregator',
                        internalType: 'contract IAggregator',
                        type: 'address',
                    },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'beneficiary', internalType: 'address payable', type: 'address' },
        ],
        name: 'handleAggregatedOps',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'ops',
                internalType: 'struct UserOperation[]',
                type: 'tuple[]',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'beneficiary', internalType: 'address payable', type: 'address' },
        ],
        name: 'handleOps',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'op',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'target', internalType: 'address', type: 'address' },
            { name: 'targetCallData', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'simulateHandleOp',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'simulateValidation',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [],
        name: 'unlockStake',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'withdrawAddress',
                internalType: 'address payable',
                type: 'address',
            },
        ],
        name: 'withdrawStake',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'withdrawAddress',
                internalType: 'address payable',
                type: 'address',
            },
            { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'withdrawTo',
        outputs: [],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const iMulticall3ABI = [
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            {
                name: 'calls',
                internalType: 'struct IMulticall3.Call[]',
                type: 'tuple[]',
                components: [
                    { name: 'target', internalType: 'address', type: 'address' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'aggregate',
        outputs: [
            { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
            { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
        ],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            {
                name: 'calls',
                internalType: 'struct IMulticall3.Call3[]',
                type: 'tuple[]',
                components: [
                    { name: 'target', internalType: 'address', type: 'address' },
                    { name: 'allowFailure', internalType: 'bool', type: 'bool' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'aggregate3',
        outputs: [
            {
                name: 'returnData',
                internalType: 'struct IMulticall3.Result[]',
                type: 'tuple[]',
                components: [
                    { name: 'success', internalType: 'bool', type: 'bool' },
                    { name: 'returnData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            {
                name: 'calls',
                internalType: 'struct IMulticall3.Call3Value[]',
                type: 'tuple[]',
                components: [
                    { name: 'target', internalType: 'address', type: 'address' },
                    { name: 'allowFailure', internalType: 'bool', type: 'bool' },
                    { name: 'value', internalType: 'uint256', type: 'uint256' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'aggregate3Value',
        outputs: [
            {
                name: 'returnData',
                internalType: 'struct IMulticall3.Result[]',
                type: 'tuple[]',
                components: [
                    { name: 'success', internalType: 'bool', type: 'bool' },
                    { name: 'returnData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            {
                name: 'calls',
                internalType: 'struct IMulticall3.Call[]',
                type: 'tuple[]',
                components: [
                    { name: 'target', internalType: 'address', type: 'address' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'blockAndAggregate',
        outputs: [
            { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
            { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
            {
                name: 'returnData',
                internalType: 'struct IMulticall3.Result[]',
                type: 'tuple[]',
                components: [
                    { name: 'success', internalType: 'bool', type: 'bool' },
                    { name: 'returnData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getBasefee',
        outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
        name: 'getBlockHash',
        outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getBlockNumber',
        outputs: [
            { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getChainId',
        outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getCurrentBlockCoinbase',
        outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getCurrentBlockDifficulty',
        outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getCurrentBlockGasLimit',
        outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getCurrentBlockTimestamp',
        outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
        name: 'getEthBalance',
        outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getLastBlockHash',
        outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
            {
                name: 'calls',
                internalType: 'struct IMulticall3.Call[]',
                type: 'tuple[]',
                components: [
                    { name: 'target', internalType: 'address', type: 'address' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'tryAggregate',
        outputs: [
            {
                name: 'returnData',
                internalType: 'struct IMulticall3.Result[]',
                type: 'tuple[]',
                components: [
                    { name: 'success', internalType: 'bool', type: 'bool' },
                    { name: 'returnData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
            {
                name: 'calls',
                internalType: 'struct IMulticall3.Call[]',
                type: 'tuple[]',
                components: [
                    { name: 'target', internalType: 'address', type: 'address' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'tryBlockAndAggregate',
        outputs: [
            { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
            { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
            {
                name: 'returnData',
                internalType: 'struct IMulticall3.Result[]',
                type: 'tuple[]',
                components: [
                    { name: 'success', internalType: 'bool', type: 'bool' },
                    { name: 'returnData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPaymaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const iPaymasterABI = [
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'mode',
                internalType: 'enum IPaymaster.PostOpMode',
                type: 'uint8',
            },
            { name: 'context', internalType: 'bytes', type: 'bytes' },
            { name: 'actualGasCost', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'postOp',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
            { name: 'maxCost', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'validatePaymasterUserOp',
        outputs: [
            { name: 'context', internalType: 'bytes', type: 'bytes' },
            { name: 'validationData', internalType: 'uint256', type: 'uint256' },
        ],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IStakeManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const iStakeManagerABI = [
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'totalDeposit',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'Deposited',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'totalStaked',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'unstakeDelaySec',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeLocked',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawTime',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeUnlocked',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawAddress',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'amount',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeWithdrawn',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawAddress',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'amount',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'Withdrawn',
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: '_unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
        ],
        name: 'addStake',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'depositTo',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'getDepositInfo',
        outputs: [
            {
                name: 'info',
                internalType: 'struct IStakeManager.DepositInfo',
                type: 'tuple',
                components: [
                    { name: 'deposit', internalType: 'uint112', type: 'uint112' },
                    { name: 'staked', internalType: 'bool', type: 'bool' },
                    { name: 'stake', internalType: 'uint112', type: 'uint112' },
                    { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
                    { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
                ],
            },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [],
        name: 'unlockStake',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'withdrawAddress',
                internalType: 'address payable',
                type: 'address',
            },
        ],
        name: 'withdrawStake',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'withdrawAddress',
                internalType: 'address payable',
                type: 'address',
            },
            { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'withdrawTo',
        outputs: [],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MultiTokenReceiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const multiTokenReceiverABI = [
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256[]', type: 'uint256[]' },
            { name: '', internalType: 'uint256[]', type: 'uint256[]' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC1155BatchReceived',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC1155Received',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC721Received',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'tokensReceived',
        outputs: [],
    },
    { stateMutability: 'payable', type: 'receive' },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SenderCreator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const senderCreatorABI = [
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'initCode', internalType: 'bytes', type: 'bytes' }],
        name: 'createSender',
        outputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ShieldAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const shieldAccountABI = [
    { type: 'error', inputs: [], name: 'AlreadyInitialized' },
    { type: 'error', inputs: [], name: 'DuplicateSigner' },
    { type: 'error', inputs: [], name: 'InvalidNonce' },
    { type: 'error', inputs: [], name: 'InvalidSignature' },
    { type: 'error', inputs: [], name: 'RequiredSignersNotSatisfied' },
    { type: 'error', inputs: [], name: 'TransactionFailed' },
    { type: 'error', inputs: [], name: 'Unauthorized' },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'entryPoint',
        outputs: [
            { name: '', internalType: 'contract IEntryPoint', type: 'address' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'tx_',
                internalType: 'struct Transaction',
                type: 'tuple',
                components: [
                    { name: 'target', internalType: 'address payable', type: 'address' },
                    { name: 'value', internalType: 'uint256', type: 'uint256' },
                    { name: 'payload', internalType: 'bytes', type: 'bytes' },
                    { name: 'delegate', internalType: 'bool', type: 'bool' },
                ],
            },
        ],
        name: 'execute',
        outputs: [],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
        name: 'extractSignatureProofs',
        outputs: [
            {
                name: 'proofs',
                internalType: 'struct SignatureProof[]',
                type: 'tuple[]',
                components: [
                    { name: 'a', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'b', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
                    { name: 'c', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'rInv', internalType: 'uint256', type: 'uint256' },
                    { name: 'R', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'T', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'U', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'sTHash', internalType: 'uint256', type: 'uint256' },
                    { name: 'nullifier', internalType: 'uint256', type: 'uint256' },
                ],
            },
        ],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32' }],
        name: 'getEthSignedMessageHash',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: '__entryPoint',
                internalType: 'contract IEntryPoint',
                type: 'address',
            },
            { name: '_root', internalType: 'bytes32', type: 'bytes32' },
            { name: '_requiredSigners', internalType: 'uint96', type: 'uint96' },
        ],
        name: 'initialize',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'nonce',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256[]', type: 'uint256[]' },
            { name: '', internalType: 'uint256[]', type: 'uint256[]' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC1155BatchReceived',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC1155Received',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC721Received',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'requiredSigners',
        outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'root',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'tokensReceived',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_requiredSigners', internalType: 'uint96', type: 'uint96' },
        ],
        name: 'updateRequiredSigners',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_root', internalType: 'bytes32', type: 'bytes32' }],
        name: 'updateRoot',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'userOp',
                internalType: 'struct UserOperation',
                type: 'tuple',
                components: [
                    { name: 'sender', internalType: 'address', type: 'address' },
                    { name: 'nonce', internalType: 'uint256', type: 'uint256' },
                    { name: 'initCode', internalType: 'bytes', type: 'bytes' },
                    { name: 'callData', internalType: 'bytes', type: 'bytes' },
                    { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'verificationGasLimit',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'preVerificationGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
                    {
                        name: 'maxPriorityFeePerGas',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
                    { name: 'signature', internalType: 'bytes', type: 'bytes' },
                ],
            },
            { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
            { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'validateUserOp',
        outputs: [
            { name: 'validationData', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            {
                name: 'proof',
                internalType: 'struct SignatureProof',
                type: 'tuple',
                components: [
                    { name: 'a', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'b', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
                    { name: 'c', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'rInv', internalType: 'uint256', type: 'uint256' },
                    { name: 'R', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'T', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'U', internalType: 'uint256[2]', type: 'uint256[2]' },
                    { name: 'sTHash', internalType: 'uint256', type: 'uint256' },
                    { name: 'nullifier', internalType: 'uint256', type: 'uint256' },
                ],
            },
            { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
        ],
        name: 'verifyProof',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    { stateMutability: 'payable', type: 'receive' },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ShieldErrors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const shieldErrorsABI = [
    { type: 'error', inputs: [], name: 'AlreadyInitialized' },
    { type: 'error', inputs: [], name: 'DuplicateSigner' },
    { type: 'error', inputs: [], name: 'InvalidNonce' },
    { type: 'error', inputs: [], name: 'InvalidSignature' },
    { type: 'error', inputs: [], name: 'RequiredSignersNotSatisfied' },
    { type: 'error', inputs: [], name: 'TransactionFailed' },
    { type: 'error', inputs: [], name: 'Unauthorized' },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakeManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const stakeManagerABI = [
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'totalDeposit',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'Deposited',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'totalStaked',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'unstakeDelaySec',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeLocked',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawTime',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeUnlocked',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawAddress',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'amount',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'StakeWithdrawn',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'withdrawAddress',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'amount',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'Withdrawn',
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
        ],
        name: 'addStake',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'depositTo',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'address', type: 'address' }],
        name: 'deposits',
        outputs: [
            { name: 'deposit', internalType: 'uint112', type: 'uint112' },
            { name: 'staked', internalType: 'bool', type: 'bool' },
            { name: 'stake', internalType: 'uint112', type: 'uint112' },
            { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
            { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'getDepositInfo',
        outputs: [
            {
                name: 'info',
                internalType: 'struct IStakeManager.DepositInfo',
                type: 'tuple',
                components: [
                    { name: 'deposit', internalType: 'uint112', type: 'uint112' },
                    { name: 'staked', internalType: 'bool', type: 'bool' },
                    { name: 'stake', internalType: 'uint112', type: 'uint112' },
                    { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
                    { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
                ],
            },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [],
        name: 'unlockStake',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'withdrawAddress',
                internalType: 'address payable',
                type: 'address',
            },
        ],
        name: 'withdrawStake',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            {
                name: 'withdrawAddress',
                internalType: 'address payable',
                type: 'address',
            },
            { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'withdrawTo',
        outputs: [],
    },
    { stateMutability: 'payable', type: 'receive' },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const stdInvariantABI = [
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'excludeArtifacts',
        outputs: [
            {
                name: 'excludedArtifacts_',
                internalType: 'string[]',
                type: 'string[]',
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'excludeContracts',
        outputs: [
            {
                name: 'excludedContracts_',
                internalType: 'address[]',
                type: 'address[]',
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'excludeSenders',
        outputs: [
            {
                name: 'excludedSenders_',
                internalType: 'address[]',
                type: 'address[]',
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'targetArtifactSelectors',
        outputs: [
            {
                name: 'targetedArtifactSelectors_',
                internalType: 'struct StdInvariant.FuzzSelector[]',
                type: 'tuple[]',
                components: [
                    { name: 'addr', internalType: 'address', type: 'address' },
                    { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'targetArtifacts',
        outputs: [
            {
                name: 'targetedArtifacts_',
                internalType: 'string[]',
                type: 'string[]',
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'targetContracts',
        outputs: [
            {
                name: 'targetedContracts_',
                internalType: 'address[]',
                type: 'address[]',
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'targetSelectors',
        outputs: [
            {
                name: 'targetedSelectors_',
                internalType: 'struct StdInvariant.FuzzSelector[]',
                type: 'tuple[]',
                components: [
                    { name: 'addr', internalType: 'address', type: 'address' },
                    { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'targetSenders',
        outputs: [
            {
                name: 'targetedSenders_',
                internalType: 'address[]',
                type: 'address[]',
            },
        ],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ValidateSMultTVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const validateSMultTVerifierABI = [
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'a', internalType: 'uint256[2]', type: 'uint256[2]' },
            { name: 'b', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
            { name: 'c', internalType: 'uint256[2]', type: 'uint256[2]' },
            { name: 'input', internalType: 'uint256[9]', type: 'uint256[9]' },
        ],
        name: 'verifyProof',
        outputs: [{ name: 'r', internalType: 'bool', type: 'bool' }],
    },
];
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VerifySignatureVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export const verifySignatureVerifierABI = [
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'a', internalType: 'uint256[2]', type: 'uint256[2]' },
            { name: 'b', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
            { name: 'c', internalType: 'uint256[2]', type: 'uint256[2]' },
            { name: 'input', internalType: 'uint256[11]', type: 'uint256[11]' },
        ],
        name: 'verifyProof',
        outputs: [{ name: 'r', internalType: 'bool', type: 'bool' }],
    },
];
